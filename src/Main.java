import java.io.IOException;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;

class Main {
    private static final String CURRENT_USER = "Sayanduary";
    private static final String LOGIN_TIME = getCurrentDateTimeUTC();

    public static void main(String[] args) throws SQLException, IOException, ClassNotFoundException {
        // Display authentication info
        displayAuthenticationInfo();

        try (Connection connection = DatabaseUtil.getConnection()) {
            System.out.println(" Database Connection Successful");

            Scanner scanner = new Scanner(System.in);

            while (true) {
                displayMenu();
                System.out.print("Choose an option: ");
                int choice = scanner.nextInt();

                switch (choice) {
                    case 1:
                        reserveRoom(connection, scanner);
                        break;
                    case 2:
                        viewReservations(connection);
                        break;
                    case 3:
                        getRoomNumber(connection, scanner);
                        break;
                    case 4:
                        updateReservation(connection, scanner);
                        break;
                    case 5:
                        deleteReservation(connection, scanner);
                        break;
                    case 6:
                        displayCurrentDateTime();
                        break;
                    case 0:
                        exit();
                        scanner.close();
                        return;
                    default:
                        System.out.println("❌ Invalid choice. Try again.");
                }
            }
        } catch (SQLException e) {
            System.err.println("❌ Database error: " + e.getMessage());
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    private static void displayAuthenticationInfo() {
        System.out.println("═══════════════════════════════════════════");
        System.out.println("    HOTEL MANAGEMENT SYSTEM ");
        System.out.println("═══════════════════════════════════════════");
        System.out.println("AUTHENTICATION STATUS");
        System.out.println("Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): " + getCurrentDateTimeUTC());
        System.out.println("Current User's Login: " + CURRENT_USER);
        System.out.println("Login Time: " + LOGIN_TIME);
        System.out.println("Status: ✅ Authenticated Successfully");
        System.out.println("═══════════════════════════════════════════");
    }

    private static void displayMenu() {
        System.out.println("\n === HOTEL MANAGEMENT SYSTEM ===");
        System.out.println("User: " + CURRENT_USER + " | UTC: " + getCurrentDateTimeUTC());
        System.out.println("────────────────────────────");
        System.out.println("1. Reserve a room");
        System.out.println("2. View Reservations");
        System.out.println("3. Get Room Number");
        System.out.println("4. Update Reservations");
        System.out.println("5. Delete Reservations");
        System.out.println("6. View Current Date/Time");
        System.out.println("0. Exit");
        System.out.println("────────────────────────────");
    }

    private static void reserveRoom(Connection connection, Scanner scanner) {
        System.out.println("\n === ROOM RESERVATION ===");
        System.out.println("Operator: " + CURRENT_USER + " | Time: " + getCurrentDateTimeUTC());

        try {
            System.out.print("Enter guest name: ");
            scanner.nextLine(); // consume newline
            String guestName = scanner.nextLine();

            System.out.print("Enter room number: ");
            int roomNumber = scanner.nextInt();

            System.out.print("Enter contact number: ");
            scanner.nextLine(); // consume newline
            String contactNumber = scanner.nextLine();

            // Insert reservation (reservation_date will be auto-generated by MySQL)
            String sql = "INSERT INTO reservations (guest_name, room_number, contact_number) VALUES (?, ?, ?)";

            try (PreparedStatement pstmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                pstmt.setString(1, guestName);
                pstmt.setInt(2, roomNumber);
                pstmt.setString(3, contactNumber);

                int affectedRows = pstmt.executeUpdate();

                if (affectedRows > 0) {
                    // Get the generated reservation ID
                    ResultSet generatedKeys = pstmt.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        int reservationId = generatedKeys.getInt(1);
                        System.out.println("✅ Reservation successful!");
                        System.out.println("Reservation ID: " + reservationId);
                        System.out.println("Guest: " + guestName);
                        System.out.println("Room: " + roomNumber);
                        System.out.println("Contact: " + contactNumber);
                        System.out.println("Reserved by: " + CURRENT_USER);
                        System.out.println("Time (UTC): " + getCurrentDateTimeUTC());
                    }
                } else {
                    System.out.println(" Reservation failed.");
                }
            }
        } catch (SQLException e) {
            System.err.println("❌ Error making reservation: " + e.getMessage());
        }
    }

    private static void viewReservations(Connection connection) {
        System.out.println("\n === VIEW RESERVATIONS ===");
        System.out.println("Requested by: " + CURRENT_USER + " | Time: " + getCurrentDateTimeUTC());

        try {
            String sql = "SELECT reservation_id, guest_name, room_number, contact_number, reservation_date FROM reservations ORDER BY reservation_date DESC";

            try (Statement stmt = connection.createStatement();
                 ResultSet rs = stmt.executeQuery(sql)) {

                System.out.println("\nCurrent Reservations:");
                System.out.println("┌─────────────────┬──────────────────┬─────────────┬──────────────────┬─────────────────────┐");
                System.out.println("│ Reservation ID  │ Guest Name       │ Room Number │ Contact Number   │ Reservation Date    │");
                System.out.println("├─────────────────┼──────────────────┼─────────────┼──────────────────┼─────────────────────┤");

                boolean hasReservations = false;
                while (rs.next()) {
                    hasReservations = true;
                    int reservationId = rs.getInt("reservation_id");
                    String guestName = rs.getString("guest_name");
                    int roomNumber = rs.getInt("room_number");
                    String contactNumber = rs.getString("contact_number");
                    Timestamp reservationDate = rs.getTimestamp("reservation_date");

                    System.out.printf("│ %-15d │ %-16s │ %-11d │ %-16s │ %-19s │%n",
                            reservationId,
                            truncateString(guestName, 16),
                            roomNumber,
                            truncateString(contactNumber, 16),
                            reservationDate.toString());
                }

                System.out.println("└─────────────────┴──────────────────┴─────────────┴──────────────────┴─────────────────────┘");

                if (!hasReservations) {
                    System.out.println("No reservations found.");
                }
            }
        } catch (SQLException e) {
            System.err.println(" Error viewing reservations: " + e.getMessage());
        }
    }

    private static void getRoomNumber(Connection connection, Scanner scanner) {
        System.out.println("\n === GET ROOM NUMBER === ");
        System.out.println("Operator: " + CURRENT_USER + " | Time: " + getCurrentDateTimeUTC());

        try {
            System.out.print("Enter reservation ID: ");
            int reservationId = scanner.nextInt();

            System.out.print("Enter guest name: ");
            scanner.nextLine(); // consume newline
            String guestName = scanner.nextLine();

            String sql = "SELECT room_number FROM reservations WHERE reservation_id = ? AND guest_name = ?";

            try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
                pstmt.setInt(1, reservationId);
                pstmt.setString(2, guestName);

                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        int roomNumber = rs.getInt("room_number");
                        System.out.println("✅ Room number for Reservation ID " + reservationId +
                                " and Guest '" + guestName + "' is: " + roomNumber);
                    } else {
                        System.out.println("Reservation not found for the given ID and guest name.");
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println(" Error retrieving room number: " + e.getMessage());
        }
    }

    private static void updateReservation(Connection connection, Scanner scanner) {
        System.out.println("\n === UPDATE RESERVATION ===");
        System.out.println("Operator: " + CURRENT_USER + " | Time: " + getCurrentDateTimeUTC());

        try {
            System.out.print("Enter reservation ID to update: ");
            int reservationId = scanner.nextInt();
            scanner.nextLine(); // consume newline

            if (!reservationExists(connection, reservationId)) {
                System.out.println(" Reservation not found for the given ID.");
                return;
            }

            System.out.print("Enter new guest name: ");
            String newGuestName = scanner.nextLine();

            System.out.print("Enter new room number: ");
            int newRoomNumber = scanner.nextInt();
            scanner.nextLine(); // consume newline

            System.out.print("Enter new contact number: ");
            String newContactNumber = scanner.nextLine();

            String sql = "UPDATE reservations SET guest_name = ?, room_number = ?, contact_number = ? WHERE reservation_id = ?";

            try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
                pstmt.setString(1, newGuestName);
                pstmt.setInt(2, newRoomNumber);
                pstmt.setString(3, newContactNumber);
                pstmt.setInt(4, reservationId);

                int affectedRows = pstmt.executeUpdate();

                if (affectedRows > 0) {
                    System.out.println("✅ Reservation updated successfully!");
                    System.out.println("Updated by: " + CURRENT_USER + " at " + getCurrentDateTimeUTC() + " (UTC)");
                } else {
                    System.out.println(" Reservation update failed.");
                }
            }
        } catch (SQLException e) {
            System.err.println(" Error updating reservation: " + e.getMessage());
        }
    }

    private static void deleteReservation(Connection connection, Scanner scanner) {
        System.out.println("\n🗑️ === DELETE RESERVATION ===");
        System.out.println("Operator: " + CURRENT_USER + " | Time: " + getCurrentDateTimeUTC());

        try {
            System.out.print("Enter reservation ID to delete: ");
            int reservationId = scanner.nextInt();

            if (!reservationExists(connection, reservationId)) {
                System.out.println(" Reservation not found for the given ID.");
                return;
            }

            String sql = "DELETE FROM reservations WHERE reservation_id = ?";

            try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
                pstmt.setInt(1, reservationId);

                int affectedRows = pstmt.executeUpdate();

                if (affectedRows > 0) {
                    System.out.println("✅ Reservation deleted successfully!");
                    System.out.println("Deleted by: " + CURRENT_USER + " at " + getCurrentDateTimeUTC() + " (UTC)");
                } else {
                    System.out.println(" Reservation deletion failed.");
                }
            }
        } catch (SQLException e) {
            System.err.println(" Error deleting reservation: " + e.getMessage());
        }
    }

    private static boolean reservationExists(Connection connection, int reservationId) {
        try {
            String sql = "SELECT reservation_id FROM reservations WHERE reservation_id = ?";

            try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
                pstmt.setInt(1, reservationId);
                try (ResultSet rs = pstmt.executeQuery()) {
                    return rs.next();
                }
            }
        } catch (SQLException e) {
            System.err.println("Error checking reservation existence: " + e.getMessage());
            return false;
        }
    }

    private static void displayCurrentDateTime() {
        System.out.println("\n🕐 === CURRENT DATE & TIME ===");
        System.out.println("Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): " + getCurrentDateTimeUTC());
        System.out.println("Current User: " + CURRENT_USER);
        System.out.println("Login Time: " + LOGIN_TIME);
        System.out.println("Session Duration: " + getSessionDuration() + " minutes");
    }

    private static String getCurrentDateTimeUTC() {
        LocalDateTime utcNow = LocalDateTime.now(ZoneOffset.UTC);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        return utcNow.format(formatter);
    }

    private static long getSessionDuration() {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            LocalDateTime loginDateTime = LocalDateTime.parse(LOGIN_TIME, formatter);
            LocalDateTime currentDateTime = LocalDateTime.parse(getCurrentDateTimeUTC(), formatter);
            return java.time.Duration.between(loginDateTime, currentDateTime).toMinutes();
        } catch (Exception e) {
            return 0;
        }
    }

    private static String truncateString(String str, int length) {
        if (str == null) return "";
        return str.length() > length ? str.substring(0, length - 3) + "..." : str;
    }

    private static void exit() throws InterruptedException {
        System.out.println("\n═══════════════════════════════════════════");
        System.out.println("Thank you for using Hotel Management System!");
        System.out.println("User: " + CURRENT_USER);
        System.out.println("Login Time: " + LOGIN_TIME);
        System.out.println("Logout Time (UTC): " + getCurrentDateTimeUTC());
        System.out.println("Session Duration: " + getSessionDuration() + " minutes");
        System.out.println("═══════════════════════════════════════════");

        System.out.print("Exiting System");
        int i = 5;
        while (i != 0) {
            System.out.print(".");
            Thread.sleep(1000);
            i--;
        }
        System.out.println();
        System.out.println("Thank You For Using Hotel Management System!!!");
    }
}